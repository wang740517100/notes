关系数据库经过几十年的发展后已经非常成熟，强大的 SQL 功能和 ACID 的属性
关系数据库的缺点：
- 关系数据库存储的是行记录，无法存储数据结构
- 关系数据库的 schema 扩展很不方便
- 关系数据库在大数据场景下 I/O 较高
- 关系数据库的全文搜索功能比较弱

常见的 NoSQL 方案分为 4 类。
- K-V 存储：解决关系数据库无法存储数据结构的问题，以 Redis 为代表。
- 文档数据库：解决关系数据库强 schema 约束的问题，以 MongoDB 为代表。
- 列式数据库：解决关系数据库大数据场景下的 I/O 问题，以 HBase 为代表。
- 全文搜索引擎：解决关系数据库的全文搜索性能问题，以 Elasticsearch 为代表。

K-V 存储：
Redis 的事务只能保证隔离性和一致性（I 和 C），无法保证原子性和持久性（A 和 D）

文档型数据库：为了解决关系数据库 schema 带来的问题，文档数据库应运而生。文档数据库
最大的特点就是 no-schema，可以存储和读取任意的数据。目前绝大部分文档数据库存储的数据
格式是 JSON（或者 BSON），因为 JSON 数据是自描述的，无须在使用前定义字段，读取一个
JSON 中不存在的字段也不会导致 SQL 那样的语法错误。
- 新增字段简单
- 历史数据不会出错
- 可以很容易存储复杂数据
文档数据库的这个特点，特别适合电商和游戏这类的业务场景

列式数据库：列式数据库就是按照列来存储数据的数据库，与之对应的传统关系数据库被称为
“行式数据库”，因为关系数据库是按照行来存储数据的。
- 业务同时读取多个列时效率高，因为这些列都是按行存储在一起的，一次磁盘操作就能够把
  一行数据中的各个列都读取到内存中
- 能够一次性完成对一行中的多个列的写操作，保证了针对行数据写操作的原子性和一致性；
  否则如果采用列存储，可能会出现某次写操作，有的列成功了，有的列失败了，导致数据不一致
ps: 基于上述列式存储的优缺点，一般将列式存储应用在离线的大数据分析和统计场景中，因为这种场景
主要是针对部分列单列进行操作，且数据写入后就无须再更新删除

全文搜索引擎: 传统的关系型数据库通过索引来达到快速查询的目的，但是在全文搜索的业务场景下，
索引也无能为力，主要体现在：
- 全文搜索的条件可以随意排列组合，如果通过索引来满足，则索引的数量会非常多
- 全文搜索的模糊匹配方式，索引无法满足，只能用 like 查询，而 like 查询是整表扫描，效率非常低。



关系型和NoSQL数据库的选型。考虑几个指标，数据量、并发量、实时性、一致性要求、读写分布和类型、安全性、
运维性等。根据这些指标，软件系统可分成几类。
1.管理型系统，如运营类系统，首选关系型。
2.大流量系统，如电商单品页的某个服务，后台选关系型，前台选内存型。
3.日志型系统，原始数据选列式，日志搜索选倒排索引。
4.搜索型系统，指站内搜索，非通用搜索，如商品搜索，后台选关系型，前台选倒排索引。
5.事务型系统，如库存、交易、记账，选关系型+缓存+一致性协议，或新型关系数据库。
6.离线计算，如大量数据分析，首选列式，关系型也可以。
7.实时计算，如实时监控，可以选时序数据库，或列式数据库。