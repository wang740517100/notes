按照不同的思路来拆分软件系统，就会得到不同的架构。常见的拆分思路有如下三种。
- 面向流程拆分: 将整个业务流程拆分为几个阶段，每个阶段作为一部分。
- 面向服务拆分: 将系统提供的服务拆分，每个服务作为一部分。
- 面向功能拆分: 将系统提供的功能拆分，每个功能作为一部分。
eg: TCP/IP 协议栈为例, OSI五层为流程拆分; 应用层的HTTP、FTP、SMTP 等服务,HTTP 提供 Web 服务,
FTP 提供文件服务,SMTP 提供邮件服务为服务拆分; 每个服务都会提供相应的功能如,HTTP 服务提供 GET、
POST 功能,FTP 提供上传下载功能,SMTP 提供邮件发送和收取功能, 为功能拆分。


分层架构:
- C/S 架构、B/S 架构
- MVC 架构、MVP 架构
- 逻辑分层架构

SOA架构:
- 服务
- ESB(Enterprise Service Bus, 企业服务总线)
- 松耦合

微服务架构:
关于微服务和SOA的几个典型观点:
- 微服务是 SOA 的实现方式
- 微服务是去掉 ESB 后的 SOA
- 微服务是一种和 SOA 相似但本质上不同的架构理念

微服务与 SOA 的对比:
- 服务粒度: SOA的服务粒度要粗一些，而微服务的服务粒度要细一些
- 服务通信: SOA采用了ESB作为服务间通信,比较重; 微服务使用RestFul通信,较轻。
- 服务交付: SOA 对服务的交付并没有特殊要求，因为 SOA 更多考虑的是兼容已有的系统；微服务的架构
  理念要求“快速交付”，相应地要求采取自动化测试、持续集成、自动化部署等敏捷开发相关的最佳实践。
- 应用场景: SOA 更加适合于庞大、复杂、异构的企业级系统; 微服务更加适合于快速、轻量级、基于 Web 的互联网系统。

微服务的陷阱:
- 服务划分过细，服务间关系复杂
- 服务数量太多，团队效率急剧下降
- 调用链太长，性能下降
- 调用链太长，问题定位困难
- 没有自动化支撑，无法快速交付
  1)没有自动化测试支撑，每次测试时需要测试大量接口。
  2)没有自动化部署支撑，每次部署 6 ~ 7 个服务，几十台机器，运维人员敲 shell 命令逐台部署，手都要敲麻。
  3)没有自动化监控，每次故障定位都需要人工查几十台机器几百个微服务的各种状态和各种日志文件。
- 没有服务治理，微服务数量多了后管理混乱


针对微服务拆分过细导致的问题，数量上建议基于团队规模进行拆分
- 基于业务逻辑拆分
- 基于可扩展拆分: 将系统中的业务模块按照稳定性排序，将已经成熟和改动不大的服务拆分为稳定服务，将经常变化和迭代的服务拆分为变动服务
- 基于可靠性拆分
- 基于性能拆分


通常情况下，我建议按照下面优先级来搭建基础设施：
1)服务发现、服务路由、服务容错：这是最基本的微服务基础设施。
2)接口框架、API 网关：主要是为了提升开发效率，接口框架是提升内部服务的开发效率，API 网关是为了提升与外部服务对接的效率。
3)自动化部署、自动化测试、配置中心：主要是为了提升测试和运维效率。
4)服务监控、服务跟踪、服务安全：主要是为了进一步提升运维效率。
以上 3 和 4 两类基础设施，其重要性会随着微服务节点数量增加而越来越重要，但在微服务节点数量较少的时候，
可以通过人工的方式支撑，虽然效率不高，但也基本能够顶住


微内核架构: 也被称为插件化架构（Plug-in Architecture），是一种面向功能进行拆分的可扩展性架构，通常用于实现基于产品（原文为 product-based，
指存在多个版本、需要下载安装才能使用，与 web-based 相对应）的应用。 OSGI