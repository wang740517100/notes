1、缓存双写一致性设计:
强一致时：使用内存队列将读写操作串行化
查询时: 没有就加载缓存
更新时: 先删除缓存再更新DB(先删除的原因是防止删除缓存出现异常)

问题就是: 更新时 删除缓存后更新DB前如果进来一个查询把DB旧数据
加载进缓存就会造成在下一次更新前的数据一直不一致，有内存队列就
可以避免更新时有读操作进来

非强一致性要求时: 不用内存队列
查询时: 没有就加载缓存
更新时: 先更新DB再删除缓存

问题就是: 更新时 更新DB后删除缓存前如果进来一个查询就会读到删除
缓存前的就数据，会出现短暂的数据不一致性问题


2、状态机模式
public interface Node {
    void confirmIntention();
    void changeIntention();
    void changeNodeDetail();
    void dispatchOrder();
    void open();
    void close();
}

0未拨打、1已联系、2派单、3到店、4签约、5审批、6放款


线程的设计模式: 模板方法、策略模式
IO的设计模式: 装饰模式
NIO的设计模式: 观察者模式(发布/订阅模式)、反应器模式
Runtime: 单例模式


3、知识点
HikariCP 目前最快的连接池

sc的序列化工具:
Jackson 的 ObjectMapper  mapper.readValue(content, User.class);
FastJson 的 JSON.parseObject(content, User.class);
google 的 proto buffer 和 grpc
apache 的 thift


4、注册中心:
Eureka 集群节点是平等的，客户端可以从任意一节点拉取数据，每一节点数据都是一样的。保证了可用性，降低了一致性。
ZK 多主从部署每个主从数据不一样，客户端只能访问master节点，master挂掉出现选举时是不可用的。保证了强一致性，降低了可用性。

Feign: 可以把Rest的请求进行隐藏，伪装成类似SpringMVC的Controller一样。RestTemplate
你不用再自己拼接url，拼接参数等等操作，一切都交给Feign去做。封装了ribbon负载均衡和Hystix断路器。

Zuul网关：pre routing error post

@Component @Repository @Service @Controller
@Resource @Autowired
https://blog.csdn.net/weixin_40423597/article/details/80643990


5、位运算  & ^ >>>  << >>


6、排序
Collections.sort() 使用 MergeSort JDK1.6
Collections.sort() 使用 TimSort JDK1.7  (TimSort是结合了归并排序和插入排序)


7、object中8个方法
clone(), equals(), hashCode(), toString(), notify(), notifyAll(),
wait(), finalize(), getClass()

8、匿名内部类只能访问外部类的Final变量. Java 8更加智能：如果局部变量被匿名内部类访问，
  那么该局部变量相当于自动使用了final修饰。

9、编码知识
ASCII (American Standard Code for Information Interchange)
7bit, 最多128个字符, 只适用美国的字符。

ISO-8859-1
8bit, 最多256个字符, 在ASCII上的扩展(向下兼容), 把一些西方国家字符添加进来。

gb2312
16bit, 最多65536个字符, 国标, 一些常用中文字符。

gbk
16bit, 在gb2312里补全生僻字。

gb18030
16bit, 所有中文字符的标准。

big5
16bit, 台湾繁体字标准。

unicode
16bit, 全球通用字符标准, 涵盖所有国家的字符标准。

utf-8/utf-16/utf-32
- unicode的实现方式, unicode是一种编码标准, utf是一种存储标准。
- utf-16(utf-16le, utf-16be)
- utf-8是一种常用的存储方式, 因为如果使用unicode存储对于美国等西方国家浪费存储空间。
- utf-8中汉字是占3个字节, 不同国家的字符字节数不一样


10、util下的工具类中怎么直接使用bean：
@Component
public class AutowireStaticSmartInitializingSingleton implements SmartInitializingSingleton {

    @Autowired
    private AutowireCapableBeanFactory beanFactory;

    /**
     * 当所有的单例Bena初始化完成后，对static静态成员进行赋值
     */
    @Override
    public void afterSingletonsInstantiated() {
        // 因为是给static静态属性赋值，因此这里new一个实例做注入是可行的
        beanFactory.autowireBean(new UserHelper());
    }
}

public class UserHelper {

    static UCClient ucClient;

    @Autowired
    public void setUcClient(UCClient ucClient) {
        UserHelper.ucClient = ucClient;
    }

    public static void test() {
        // ucClient
    }
}

spring是单例的吗，如何保证线程安全？
是的，保证线程安全的两个措施
全局变量和静态变量：若每个线程中对全局变量、静态变量读操作，而无写操作，一般来说这个全局变量是线程安全的。
若多个线程同时执行写操作，需要考虑线程同步问题，否则影响线程安全

实例变量：使用ThreadLocl保存每个线程的变量副本


讨论eureka和zk作为注册中心的区别时从架构上来说
1)eureka是集群式
2)zk是分布式的主从架构

------------------------------- Htttp协议 -------------------------------
- http1.0是一个无状态协议，在服务器响应后会断开tcp连接。ps某些服务支持Connection: keep-alive。
- http1.1标准默认开启持久连接，节省了重新连接和ssl带来的开销。
- http2.0标准支持长连接，一个tcp请求可以在同一时刻处理多个http请求。
- dns域名解析  传输层  网络层 数据链路层 物理层
- dispatchServelt、handleMapping(handle)、handleAdapter(modelAndView)、ViewReslover(view)

dns解析过程：
浏览器缓存 -> 本地hosts文件 -> 本地域名服务器 -> 根域名服务器 返回 网站名注册的域名服务器

TCP相对于UDP协议的特点是：
面向连接: 三次握手四次挥手
字节流: 数据放在放在缓冲区中和读写的次数没有关系。(ps:UDP就是写一个data读一个data)
可靠传输: 发送应答机制, 超时重传机制, 报文包的有序性, 拥塞控制
ps: UDP协议则和IP协议一样提供的是不可靠的服务。它们都需要上层协议来处理数据确认和超时重传。
https://blog.csdn.net/wodewutai17quiet/article/details/82252454

三次握手：
client和server都要确保自己可以发送和接收信息的最短次数是3次

四次挥手:
client -> server   我要断开连接了?
server -> client   还有一些信息在发送，等一会。
server -> client   我断开连接了。
client -> server   可以断开连接了。

短连接  假的长连接(短时间内的连接)  长连接(多路复用)
http是一种无状态的协议
100 请求被接收继续处理
200 返回成功
301 网页被永久移动
302 网页被临时移动

400 服务器不理解的语法
401 登录后未授权
403 访问被禁止
404 找不到路径

500 服务器错误
501 服务器不具备完成请求的功能
502 错误的网关
503 服务器暂时不可用

osi七层协议（五层协议）
应用层(http协议)(包括展示层、会话层)
传输层(tcp协议, ip + port)
网络层(ip协议, 网卡/网关, 交换机/子网)
数据链路层(以太网协议, mac)
物理层(传输01的电信号、如网线光缆)

浏览器浏览网页
DNS(domain name system) 域名 -> ip + port
http包 -> tcp包 -> ip包 -> 以太网包


------------------------------- Throwable -------------------------------
Throwable、Error、Exception、RuntimeException 区别和联系各是什么？
- Throwable是顶层接口，Error和Exception实现了Throwable
- Error错误除了报告给用户没有办法处理
- 将派生于Error或者RuntimeException的异常称为unchecked异常
ps: 调用一个checked异常的方法，例如IOException，如果抛出所有的checked异常时无法通过编译的。程序运行过程中发现错误，利用throw语句抛出一个异常。
对于unchecked异常，无非主要是两种情况要么是可以避免的（Runtime Exception），要么是不可控制的。这些也是需要声明异常的。







