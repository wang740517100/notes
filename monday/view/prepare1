1、Throwable、Error、Exception、RuntimeException 区别和联系各是什么?
- Error、Exception是Throwable的子接口，RuntimeException是Exception的子类
- Error是系统错误不可处理(oom)
- RuntimeException是可以避免的(数组下标越界、空指针异常、并发修改异常)

2、checked exception 和 unchecked exception的区别是什么?
- Error和RuntimeException下的属于unchecked exception，其它的是checked exception
- 前者不可处理，后者可以处理如IOException

3、volatile的特性是什么? 可以完美解决多线程同步问题吗?
- 可见性和有序性，不可

4、threadlocal有什么用? 多线程使用有什么需要注意的地方? 使用完后为什么要remove?
- 保存线程的本地信息供供工作时使用，如上下文，如日志调用链

5、synchronized和reentrantlock的底层原理各是什么? 有什么优缺点?
-- monitorEnter和monitorExit，AQS，后者加condition更灵活

6、mysql数据库底层的排序机制? sort page是怎么工作的?
-- 插入排序，快速定位到区，双向链表page的header里有索引信息，页重排

7、JVM加载class文件的原理机制?为什么要用双亲委托模型? 如何打破双亲委托模型?
jvm如何认定两个对象同属于一个类型，必须同时满足下面两个条件：
- 都是用同名的类完成实例化的
- 两个实例各自对应的同名的类的加载器必须是同一个

如果不想打破双亲委派模型，就重写ClassLoader类中的findClass()方法即可，无法被父类加载器加载的类最终会通过这个方法被加载。
如果想打破双亲委派模型则需要重写loadClass()方法（当然其中的坑也不会少）。
典型的打破双亲委派模型的框架和中间件有tomcat与osgi

8、对Runtime的了解
- JVM运行在系统之上，而对于系统相关的信息获取，java将其封装在RunTime类当中，
- RunTime是单例模式，其构造方法私有，必须通过getRunTime方法获取RunTime

9、数据库的范式
- 属性的原子性
- 非主键属性完全依赖主键属性
- 不包含其他表的属性信息

10、多线程如何避免死锁
- 谨慎使用事务，减小事务粒度
- 使用乐观锁代替排它锁
- 使用超时抛出异常和告警机制

11、如何解决高并发问题?是否进行过相应程序的编写?
- 使用多线性和锁
- 使用mq削峰
- 使用redis非关系库

-------------------------------------------------------------------------------------

重点询问你参与的每个工程和其中的重难点分析，每个业务侧重点各是什么?为什么要这么做?

另外工程的流程架构图是怎样的? 工作原理是什么? 数据流是什么? 系统的瓶颈点是什么? 日常工作中有什么隐患和问题?

出现问题的时候，是什么解决的?

系统的稳定性、可用性和容错机制是怎么做的? 监控机制是怎么考虑的?

项目介绍过程中，面试官会详细询问项目具体业务，及自己在项目中承担的角色，及过程中遇到的难点和如何克服？

对你来说影响最大的一个项目(该面试中有关项目问题都针对该项目展开)?

为什么会想做这个项目?这个项目的ideal是谁提出来的?

项目中哪一部分最难攻克?如何攻克?

项目运行过程中成员是否曾就某一点发生争执?作为Leader你是如何解决的?具体事例?

项目最终实现效果？

项目具体部分使用的设计模式并简述选择理由？

项目有何需改进之处并初拟改进方案？


