1、Throwable、Error、Exception、RuntimeException 区别和联系各是什么?
- Error、Exception是Throwable的子接口，RuntimeException是Exception的子类
- Error是系统错误不可处理(oom)
- RuntimeException是可以避免的(数组下标越界、空指针异常、并发修改异常)

2、checked exception 和 unchecked exception的区别是什么?
- Error和RuntimeException下的属于unchecked exception，其它的是checked exception
- 前者不可处理，后者可以处理如IOException

3、volatile的特性是什么? 可以完美解决多线程同步问题吗?
- 可见性和有序性，不可
- 内存一致性协议(MESI)，内存屏障保证指令重排

4、threadlocal有什么用? 多线程使用有什么需要注意的地方? 使用完后为什么要remove?
- 保存信息到线程本地供上下文使用，如日志调用id

5、synchronized和reentrantlock的底层原理各是什么? 有什么优缺点?
- 每个对象头都有一个monitor对象对应，monitorEnter和monitorExit
- reentrantlock使用了AQS实现，配合condition可以实现灵活的等待/通知机制

6、mysql数据库底层的排序机制? sort page是怎么工作的?
全字段排序: 会给线程分配一块内存用来排序(sort_page)，对sort_buffer里的数据进行快速排序。
全字段排序如果行数据过长会造成内存开销很大，数据库会根据配置选择rowid排序(max_length_for_sort_data)
rowid排序: 和全字段排序的过程一样不过只存了行数据的rowid，会多一次回表过程，磁盘读性能较差
优化：对排序的字段创建索引，最好方式使用覆盖索引减少回表

7、JVM加载class文件的原理机制?为什么要用双亲委托模型? 如何打破双亲委托模型?
jvm如何认定两个对象同属于一个类型，必须同时满足下面两个条件:
- 都是用同名的类完成实例化的
- 两个实例各自对应的同名的类的加载器必须是同一个

打破双亲委托模型:
- 重写自定义类加载器中的loadClass()方法可以打破双亲委派模型
- 重写ClassLoader类中的findClass()方法不会打破双亲委派模型
- 典型的打破双亲委派模型的框架和中间件有tomcat与osgi

8、对Runtime的了解
- Runtime是java提供获取系统运行环境信息的一个单例,必须通过getRunTime方法获取RunTime

9、数据库的范式
- 属性的原子性
- 非主键属性完全依赖主键属性
- 不包含其他表的属性信息

10、多线程如何避免死锁
- 加锁顺序（线程按照一定的顺序加锁）
- 加锁时限（线程尝试获取锁的时候加上一定的时限，超过时限则放弃对该锁的请求，并释放自己占有的锁）
- 死锁检测机制，检测后回退

11、如何解决高并发问题?是否进行过相应程序的编写?
- 使用多线程
- 使用mq削峰
- 使用redis非关系库

-------------------------------------------------------------------------------------

重点询问你参与的每个工程和其中的重难点分析，每个业务侧重点各是什么?为什么要这么做?

另外工程的流程架构图是怎样的? 工作原理是什么? 数据流是什么? 系统的瓶颈点是什么? 日常工作中有什么隐患和问题?

出现问题的时候，是什么解决的?

系统的稳定性、可用性和容错机制是怎么做的? 监控机制是怎么考虑的?

项目介绍过程中，面试官会详细询问项目具体业务，及自己在项目中承担的角色，及过程中遇到的难点和如何克服？
- 对于排期没有考虑到的外部对接带来的风险(对方没有时间配合或请假等)
- 代码很乱，排期时间不够（退出合作）
- 外部系统不稳定带来的可用性差的问题，修改流程重新上线（兔分期电子合同三要素电子签）

对你来说影响最大的一个项目(该面试中有关项目问题都针对该项目展开)?
- 退出合作系统

为什么会想做这个项目?这个项目的ideal是谁提出来的?

项目中哪一部分最难攻克?如何攻克?
- 签署合同

项目运行过程中成员是否曾就某一点发生争执?作为Leader你是如何解决的?具体事例?
- 审核流信息多表的三种方案

项目最终实现效果？

项目具体部分使用的设计模式并简述选择理由？

项目有何需改进之处并初拟改进方案？
- 流程中断带来的数据修复
- 退固保金时下游订单的错误防重


